<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OSS.Common</name>
    </assembly>
    <members>
        <member name="T:OSS.Common.Authrization.MemberShiper">
            <summary>
            当前系统访问上下文信息
            </summary>
        </member>
        <member name="P:OSS.Common.Authrization.MemberShiper.AppAuthorize">
            <summary>
              应用授权信息
            </summary>
        </member>
        <member name="P:OSS.Common.Authrization.MemberShiper.MemberInfo">
            <summary>
              登陆用户信息
            </summary>
        </member>
        <member name="P:OSS.Common.Authrization.MemberShiper.IsMemberAuthorized">
            <summary>
            是否已经验证
            </summary>
        </member>
        <member name="M:OSS.Common.Authrization.MemberShiper.SetMemberInfo(OSS.Common.Authrization.MemberInfo)">
            <summary>
              设置用户信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:OSS.Common.Authrization.MemberShiper.SetAppAuthrizeInfo(OSS.Common.Authrization.SysAuthorizeInfo)">
            <summary>
              设置应用授权信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:OSS.Common.Authrization.MemberShiper.GetToken(System.String,System.Int64,System.String)">
            <summary>
            通过 ID 生成对应的Token
            </summary>
            <param name="encryptKey"></param>
            <param name="id"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Authrization.MemberShiper.GetTokenDetail(System.String,System.String)">
            <summary>
             通过token解析出对应的id和key
            </summary>
            <param name="encryptKey"></param>
            <param name="token"></param>
            <returns>返回解析信息，Item1为id，Item2为key</returns>
        </member>
        <member name="T:OSS.Common.Authrization.MemberInfo">
            <summary>
            授权用户信息
            </summary>
        </member>
        <member name="P:OSS.Common.Authrization.MemberInfo.Key">
            <summary>
              其他key
            </summary>
        </member>
        <member name="P:OSS.Common.Authrization.MemberInfo.Id">
            <summary>
              会员ID 
            </summary>
        </member>
        <member name="P:OSS.Common.Authrization.MemberInfo.Name">
            <summary>
              用户名称
            </summary>
        </member>
        <member name="P:OSS.Common.Authrization.MemberInfo.Avatar">
            <summary>
            用户头像
            </summary>
        </member>
        <member name="P:OSS.Common.Authrization.MemberInfo.MemberData">
            <summary>
            用户数据
            </summary>
        </member>
        <member name="T:OSS.Common.Authrization.SysAuthorizeInfo">
            <summary>
              授权认证信息
            </summary>
        </member>
        <!-- 对于成员“P:OSS.Common.Authrization.SysAuthorizeInfo.AppVersion”忽略有格式错误的 XML 注释 -->
        <member name="P:OSS.Common.Authrization.SysAuthorizeInfo.AppSource">
            <summary>
              应用来源
            </summary>
        </member>
        <member name="P:OSS.Common.Authrization.SysAuthorizeInfo.AppClient">
            <summary>
            应用客户端类型
            iOS, Android,PC等用户自定义
            </summary>
        </member>
        <!-- 对于成员“P:OSS.Common.Authrization.SysAuthorizeInfo.DeviceId”忽略有格式错误的 XML 注释 -->
        <member name="P:OSS.Common.Authrization.SysAuthorizeInfo.Token">
            <summary>
             Token 
            </summary>
        </member>
        <member name="P:OSS.Common.Authrization.SysAuthorizeInfo.TimeSpan">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:OSS.Common.Authrization.SysAuthorizeInfo.Sign">
            <summary>
             sign标识
            </summary>
        </member>
        <member name="P:OSS.Common.Authrization.SysAuthorizeInfo.IpAddress">
            <summary>
            IP地址   可选
            </summary>
        </member>
        <member name="P:OSS.Common.Authrization.SysAuthorizeInfo.WebBrowser">
            <summary>
            浏览器类型   可选
            </summary>
        </member>
        <member name="P:OSS.Common.Authrization.SysAuthorizeInfo.OriginAppSource">
            <summary>
            原始appsource   可选
            主要是当应用层向基础层传递时使用
             如支付系统等，api层面对多个应用，每个应用对应不同支付key，调用支付接口时必传
            </summary>
        </member>
        <member name="M:OSS.Common.Authrization.SysAuthorizeInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:OSS.Common.Authrization.SysAuthorizeInfo.FromSignData(System.String,System.Char)">
            <summary>
              从头字符串中初始化签名相关属性信息
            </summary>
            <param name="signData"></param>
            <param name="separator">A=a  B=b 之间分隔符</param>
        </member>
        <member name="M:OSS.Common.Authrization.SysAuthorizeInfo.ToSignData(System.String,System.Char)">
            <summary>
            生成签名后的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Authrization.SysAuthorizeInfo.Copy">
            <summary>
            复制新的授权信息实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Authrization.SysAuthorizeInfo.CheckSign(System.String,System.Char)">
            <summary>
              检验是否合法
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Authrization.SysAuthorizeInfo.GetSignContent(System.Char)">
            <summary>
              获取要加密签名的串
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Authrization.SysAuthorizeInfo.AddSignDataValue(System.String,System.String,System.Char,System.Text.StringBuilder)">
            <summary>
              追加要加密的串
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="separator"></param>
            <param name="strTicketParas"></param>
        </member>
        <member name="T:OSS.Common.ComModels.Enums.ResultTypes">
            <summary>
              结果类型
            </summary>
        </member>
        <member name="F:OSS.Common.ComModels.Enums.ResultTypes.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:OSS.Common.ComModels.Enums.ResultTypes.ParaError">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="F:OSS.Common.ComModels.Enums.ResultTypes.ParaNotMeet">
            <summary>
            条件不满足
            </summary>
        </member>
        <member name="F:OSS.Common.ComModels.Enums.ResultTypes.AddFail">
            <summary>
            添加失败
            </summary>
        </member>
        <member name="F:OSS.Common.ComModels.Enums.ResultTypes.UpdateFail">
            <summary>
            更新失败
            </summary>
        </member>
        <member name="F:OSS.Common.ComModels.Enums.ResultTypes.ObjectNull">
            <summary>
            对象不存在
            </summary>
        </member>
        <member name="F:OSS.Common.ComModels.Enums.ResultTypes.ObjectExsit">
            <summary>
            对象已存在
            </summary>
        </member>
        <member name="F:OSS.Common.ComModels.Enums.ResultTypes.ObjectStateError">
            <summary>
            对象状态不正常
            </summary>
        </member>
        <member name="F:OSS.Common.ComModels.Enums.ResultTypes.UnAuthorize">
            <summary>
            当前用户未验证身份信息
            </summary>
        </member>
        <member name="F:OSS.Common.ComModels.Enums.ResultTypes.NoRight">
            <summary>
            没有权限
            </summary>
        </member>
        <member name="F:OSS.Common.ComModels.Enums.ResultTypes.InnerError">
            <summary>
            内部错误（服务器错误）
            </summary>
        </member>
        <member name="T:OSS.Common.ComModels.Enums.SortType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="F:OSS.Common.ComModels.Enums.SortType.DESC">
            <summary>
            倒序  由大到小
            </summary>
        </member>
        <member name="F:OSS.Common.ComModels.Enums.SortType.ASC">
            <summary>
            顺序  由小到大
            </summary>
        </member>
        <member name="T:OSS.Common.ComModels.SearchMo">
            <summary>
            搜索实体
            </summary>
        </member>
        <member name="P:OSS.Common.ComModels.SearchMo.CurrentPage">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:OSS.Common.ComModels.SearchMo.PageSize">
            <summary>
            页面大小
            </summary>
        </member>
        <member name="P:OSS.Common.ComModels.SearchMo.StartRow">
            <summary>
               起始行 -只读属性
            </summary>
        </member>
        <member name="P:OSS.Common.ComModels.SearchMo.OrderDics">
            <summary>
            排序集合      适用于多个查询条件
            </summary>
        </member>
        <member name="P:OSS.Common.ComModels.SearchMo.FilterDics">
            <summary>
            搜索关键字集合      适用于多个查询条件
            </summary>
        </member>
        <member name="T:OSS.Common.ComModels.PageListMo`1">
            <summary>
             分页实体
            </summary>
        </member>
        <member name="M:OSS.Common.ComModels.PageListMo`1.#ctor">
            <summary>
               空构造函数  照顾  json序列化 
            </summary>
        </member>
        <member name="M:OSS.Common.ComModels.PageListMo`1.#ctor(OSS.Common.ComModels.Enums.ResultTypes,System.String)">
            <summary>
              出错时  构造函数    
            </summary>
            <param name="ret"></param>
            <param name="message"></param>
        </member>
        <member name="M:OSS.Common.ComModels.PageListMo`1.#ctor(System.Int64,System.Collections.Generic.List{`0})">
            <summary>
              正常赋值时的实体
            </summary>
            <param name="list"></param>
            <param name="total"></param>
        </member>
        <member name="P:OSS.Common.ComModels.PageListMo`1.Data">
            <summary>
            实体列表
            </summary>
        </member>
        <member name="P:OSS.Common.ComModels.PageListMo`1.Total">
            <summary>
            总数
            </summary>
        </member>
        <member name="T:OSS.Common.ComModels.PageListMoMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:OSS.Common.ComModels.PageListMoMap.ConvertToPageList``2(OSS.Common.ComModels.PageListMo{``0},System.Func{``0,``1})">
            <summary>
              转化pageList列表实体
            </summary>
            <typeparam name="TPara"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="pageList"></param>
            <param name="convertFun"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.ComModels.ResultMo">
            <summary>
            结果实体
            </summary>
        </member>
        <member name="M:OSS.Common.ComModels.ResultMo.#ctor">
            <summary>
            空构造函数
            </summary>
        </member>
        <member name="M:OSS.Common.ComModels.ResultMo.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="ret"></param>
            <param name="message"></param>
        </member>
        <member name="M:OSS.Common.ComModels.ResultMo.#ctor(OSS.Common.ComModels.Enums.ResultTypes,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="ret"></param>
            <param name="message"></param>
        </member>
        <member name="P:OSS.Common.ComModels.ResultMo.Ret">
            <summary>
            返回结果
            一般情况下：
             2xx   成功相关状态（如： 200）
             3xx   参数相关错误 
             4xx   用户授权相关错误
             5xx   服务器内部相关错误信息
             6xx   系统级定制错误信息，如升级维护等
            也可依据第三方自行定义数值
            </summary>
        </member>
        <member name="P:OSS.Common.ComModels.ResultMo.Message">
            <summary>
            错误或者状态
            </summary>
        </member>
        <member name="P:OSS.Common.ComModels.ResultMo.IsSuccess">
            <summary>
              是否成功
            </summary>
        </member>
        <member name="T:OSS.Common.ComModels.ResultIdMo">
            <summary>
            带Id的结果实体
            </summary>
        </member>
        <member name="M:OSS.Common.ComModels.ResultIdMo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OSS.Common.ComModels.ResultIdMo.#ctor(System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:OSS.Common.ComModels.ResultIdMo.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="ret"></param>
            <param name="message"></param>
        </member>
        <member name="M:OSS.Common.ComModels.ResultIdMo.#ctor(OSS.Common.ComModels.Enums.ResultTypes,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="ret"></param>
            <param name="message"></param>
        </member>
        <member name="P:OSS.Common.ComModels.ResultIdMo.Id">
            <summary>
            返回的关键值，如返回添加是否成功并返回id
            </summary>
        </member>
        <member name="T:OSS.Common.ComModels.ResultMo`1">
            <summary>
            自定义泛型的结果实体
            </summary>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:OSS.Common.ComModels.ResultMo`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:OSS.Common.ComModels.ResultMo`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OSS.Common.ComModels.ResultMo`1.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="ret"></param>
            <param name="message"></param>
        </member>
        <member name="M:OSS.Common.ComModels.ResultMo`1.#ctor(OSS.Common.ComModels.Enums.ResultTypes,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="ret"></param>
            <param name="message"></param>
        </member>
        <member name="P:OSS.Common.ComModels.ResultMo`1.Data">
            <summary>
             结果类型数据
            </summary>
        </member>
        <member name="T:OSS.Common.ComModels.ResultMoMap">
            <summary>
             
            </summary>
        </member>
        <member name="M:OSS.Common.ComModels.ResultMoMap.ConvertToResult``2(OSS.Common.ComModels.ResultMo{``0},System.Func{``0,``1})">
            <summary>
              将结果实体转换成其他结果实体
            </summary>
            <typeparam name="TResult">输出对象</typeparam>
            <typeparam name="TPara"></typeparam>
            <returns>输出对象</returns>
        </member>
        <member name="M:OSS.Common.ComModels.ResultMoMap.ConvertToResultOnly``1(OSS.Common.ComModels.ResultMo)">
            <summary>
              将结果实体转换成其他结果实体   --转化结果是通过 泛型 定义的Result实体
                仅转化 Ret和 Message 的值  
            </summary>
            <typeparam name="TResult">输出对象</typeparam>
            <returns>输出对象</returns>
        </member>
        <member name="M:OSS.Common.ComModels.ResultMoMap.ConvertToResult``1(OSS.Common.ComModels.ResultMo)">
            <summary>
             将结果实体转换成其他结果实体   --转化结果是通过 继承 定义的Result实体  
               仅转化 Ret和 Message 的值
            </summary>
            <typeparam name="TResult">输出对象</typeparam>
            <returns>输出对象</returns>
        </member>
        <member name="T:OSS.Common.Encrypt.AesRijndael">
            <summary>
            Aes加密
            </summary>
        </member>
        <member name="M:OSS.Common.Encrypt.AesRijndael.Encrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
               aes 加密
            </summary>
            <param name="toEncrypt"></param>
            <param name="key"></param>
            <param name="encoding">加密编码方式    默认为   utf-8  </param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Encrypt.AesRijndael.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
              加密
            </summary>
            <param name="keyArray"></param>
            <param name="toEncryptArray"></param>
            <param name="iv">偏移量</param>
            <param name="keySize">key大小</param>
            <param name="blockSize">块大小</param>
            <param name="cipherMode"></param>
            <param name="paddingMode"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Encrypt.AesRijndael.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
               解密
            </summary>
            <param name="toDecrypt"></param>
            <param name="key"></param>
            <param name="encoding"> 编码方式 不传值默认为  utf-8 </param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Encrypt.AesRijndael.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            解密
            </summary>
            <param name="keyArray">key的字节流</param>
            <param name="toEncryptArray">加密串的字节流</param>
            <param name="iv">偏移量</param>
            <param name="keySize">key大小</param>
            <param name="blockSize">块大小</param>
            <param name="cipherMode"></param>
            <param name="paddingMode"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Encrypt.HmacSha1">
            <summary>
            
            </summary>
        </member>
        <member name="M:OSS.Common.Encrypt.HmacSha1.EncryptBase64(System.String,System.String,System.Text.Encoding)">
            <summary>
            返回加密后的
            </summary>
            <param name="data"></param>
            <param name="key"></param>
            <param name="encoding">如果为空，则默认Utf-8</param>
            <returns> 解密后的字节流通过Base64转化 </returns>
        </member>
        <member name="M:OSS.Common.Encrypt.HmacSha1.EncryptUtf8(System.String,System.String,System.Text.Encoding)">
            <summary>
            返回加密后的
            </summary>
            <param name="data"></param>
            <param name="key"></param>
            <param name="encoding">如果为空，则默认Utf-8</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Encrypt.HmacSha1.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            加密
            </summary>
            <param name="key"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Encrypt.Md5">
            <summary>
            MD5加密类
            </summary>
        </member>
        <member name="M:OSS.Common.Encrypt.Md5.HalfEncryptHexString(System.String)">
            <summary>
            获取16位MD5值
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Encrypt.Md5.EncryptHexString(System.String,System.Text.Encoding)">
            <summary>
            获取MD5加密值
            </summary>
            <param name="input"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Encrypt.Md5.Encrypt(System.Byte[])">
            <summary>
            获取MD5加密值
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Encrypt.Sha1">
            <summary>
            Sha1加密类
            </summary>
        </member>
        <member name="M:OSS.Common.Encrypt.Sha1.Encrypt(System.String,System.Text.Encoding)">
            <summary>
            获取Sha1加密值
            </summary>
            <param name="input"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Encrypt.Sha1.Encrypt(System.Byte[])">
            <summary>
            获取Sha1加密值
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Extention.ConvertExtention">
            <summary>
            
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.ToUInt32(System.String,System.UInt32)">
            <summary>
            字符串转化成无符号整形
            </summary>
            <param name="obj">要转化的值</param>
            <param name="defaultValue">如果转化失败，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.ToInt32(System.String,System.Int32)">
            <summary>
            字符串转化成数字
            </summary>
            <param name="obj">要转化的值</param>
            <param name="defaultValue">如果转化失败，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.ToInt32(System.Object,System.Int32)">
            <summary>
            字符串转化成数字
            </summary>
            <param name="obj">要转化的值</param>
            <param name="defaultValue">如果转化失败，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.ToInt64(System.String,System.Int32)">
            <summary>
            字符串转化成数字
            </summary>
            <param name="obj">要转化的值</param>
            <param name="defaultValue">如果转化失败，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.ToDecimal(System.String,System.Decimal)">
            <summary>
            字符串转化成数字
            </summary>
            <param name="obj">要转化的值</param>
            <param name="defaultValue">如果转化失败，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.ToDecimal(System.Object,System.Decimal)">
            <summary>
            字符串转化成数字
            </summary>
            <param name="obj">要转化的值</param>
            <param name="defaultValue">如果转化失败，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.ToDouble(System.String,System.Double)">
            <summary>
            字符串转化成数字
            </summary>
            <param name="obj">要转化的值</param>
            <param name="defaultValue">如果转化失败，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.ToDouble(System.Object,System.Double)">
            <summary>
            字符串转化成数字
            </summary>
            <param name="obj">要转化的值</param>
            <param name="defaultValue">如果转化失败，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.ToFloat(System.String,System.Single)">
            <summary>
            字符串转化成数字
            </summary>
            <param name="obj">要转化的值</param>
            <param name="defaultValue">如果转化失败，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.ToFloat(System.Object,System.Single)">
            <summary>
            字符串转化成数字
            </summary>
            <param name="obj">要转化的值</param>
            <param name="defaultValue">如果转化失败，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.ToNullableDateTime(System.String)">
            <summary>
            字符串转化成时间
            </summary>
            <param name="obj">要转化的值</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.ToBoolean(System.String)">
            <summary>
            转化成布尔类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.ToBase64(System.String,System.Text.Encoding)">
            <summary>
               根据指定编码转化成对应的64位编码
            </summary>
            <param name="source"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.FromBase64(System.String,System.Text.Encoding)">
            <summary>
               从base64编码解码出正常的值
            </summary>
            <param name="baseString"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.Base64UrlEncode(System.String)">
            <summary>
              替换base64位字符串中的特殊符号 Url友好
            </summary>
            <param name="baseString"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.Base64UrlDecode(System.String)">
            <summary>
              还原 base64 字符串中的特殊字符  Url不友好
            </summary>
            <param name="baseString"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.SqlFilter(System.String)">
            <summary>
            过滤 Sql 语句字符串中的注入脚本
            </summary>
            <param name="source">传入的字符串</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:OSS.Common.Extention.ConvertExtention.GetValue``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>
            获取字典的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dirs"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Extention.DateTimeExtention">
            <summary>
            时间秒数转化
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.DateTimeExtention.ToUtcSeconds(System.DateTime)">
            <summary>
            获取距离 1970-01-01（格林威治时间）的秒数
            </summary>
            <param name="localTime"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.DateTimeExtention.FromUtcSeconds(System.Int64)">
            <summary>
            距离 1970-01-01（格林威治时间）的秒数转换为当前时间
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.DateTimeExtention.ToUtcMilliSeconds(System.DateTime)">
            <summary>
            获取距离 1970-01-01（格林威治时间）的秒数
            </summary>
            <param name="localTime"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.DateTimeExtention.FromUtcMilliSeconds(System.Int64)">
            <summary>
            距离 1970-01-01（格林威治时间）的秒数转换为当前时间
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.DateTimeExtention.ToLocalSeconds(System.DateTime)">
            <summary>
            获取距离 1970-01-01（本地/北京时间）的秒数
            </summary>
            <param name="localTime"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.DateTimeExtention.FromLocalSeconds(System.Int64)">
            <summary>
            距离 1970-01-01（本地/北京时间）的秒数转换为当前时间
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Extention.DTO.ColumnAliasAttribute">
            <summary>
            别名属性
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.DTO.ColumnAliasAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="alias"></param>
        </member>
        <member name="T:OSS.Common.Extention.DTO.IgnoreColumnAttribute">
            <summary>
            别名属性
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.DTO.IgnoreColumnAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:OSS.Common.Extention.DTO.AutoColumnAttribute">
            <summary>
            自增长属性
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.DTO.AutoColumnAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:OSS.Common.Extention.DTO.BaseClumnAttribute">
            <summary>
            列属性封装基类
            </summary>
        </member>
        <member name="F:OSS.Common.Extention.DTO.BaseClumnAttribute._alias">
            <summary>
            
            </summary>
        </member>
        <member name="P:OSS.Common.Extention.DTO.BaseClumnAttribute.Alias">
            <summary>
            列简称
            </summary>
        </member>
        <member name="F:OSS.Common.Extention.DTO.BaseClumnAttribute._IsAuto">
            <summary>
            
            </summary>
        </member>
        <member name="P:OSS.Common.Extention.DTO.BaseClumnAttribute.IsAuto">
            <summary>
            是否是自增长列
            </summary>
        </member>
        <member name="F:OSS.Common.Extention.DTO.BaseClumnAttribute._IsIgnore">
            <summary>
            
            </summary>
        </member>
        <member name="P:OSS.Common.Extention.DTO.BaseClumnAttribute.IsIgnore">
            <summary>
            是否忽略当前列
            </summary>
        </member>
        <member name="T:OSS.Common.Extention.DTO.PropertyColumnInfo">
            <summary>
              列属性信息
            </summary>
        </member>
        <member name="P:OSS.Common.Extention.DTO.PropertyColumnInfo.Name">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:OSS.Common.Extention.DTO.PropertyColumnInfo.Alias">
            <summary>
            列别名
            </summary>
        </member>
        <member name="P:OSS.Common.Extention.DTO.PropertyColumnInfo.IsAuto">
            <summary>
            是否自增长
            </summary>
        </member>
        <member name="P:OSS.Common.Extention.DTO.PropertyColumnInfo.IsIgnore">
            <summary>
              是否忽略当前列
            </summary>
        </member>
        <member name="P:OSS.Common.Extention.DTO.PropertyColumnInfo.PropertyInfo">
            <summary>
            列属性信息
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.DTO.DTOExtetion.GetColumnAttributes(System.Type)">
            <summary>
            获取列附加属性列表
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.DTO.DTOExtetion.ChangeToType(System.String,System.Type)">
            <summary>
            转换到指定类型
            </summary>
            <param name="obj"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.DTO.DTOExtetion.ChangeToType(System.Object,System.Type)">
            <summary>
            转换到指定类型
            </summary>
            <param name="obj"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Extention.EnumExtention">
            <summary>
            枚举扩展方法类
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.EnumExtention.GetDesp(System.Enum,System.Boolean,System.String)">
            <summary>
            获取描述
            </summary>
            <param name="en">枚举对象</param>
            <param name="isFlag">是否二进制取和</param>
            <param name="operate">多个描述分隔符</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.EnumExtention.ToEnumDirs(System.Type,System.Boolean)">
            <summary>
            获取枚举字典列表
            </summary>
            <param name="enType">枚举类型</param>
            <param name="isIntValue">返回枚举值是否是int类型</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.EnumExtention.Copy(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
              拷贝字典
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Extention.OSDescriptAttribute">
            <summary>
              自定义描述属性
            </summary>
        </member>
        <member name="P:OSS.Common.Extention.OSDescriptAttribute.Description">
            <summary>
              描述信息
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.ListExtention.Merged``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Func{System.Collections.Generic.IList{``0},``0,System.Boolean})">
            <summary>
            List合并
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="target">目标对象</param>
            <param name="source">来源对象</param>
            <param name="func">重复项依据方法 true-没有重复项，可以合并，fale-有重复项，不能合并</param>
            <returns>返回合并后的目标对象 - 排除重复项</returns>
        </member>
        <member name="M:OSS.Common.Extention.ListExtention.ConvertAll``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
             .net standard 下的list转化扩展方法
            </summary>
            <typeparam name="TPara"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="list"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Extention.TaskExtention">
            <summary>
              任务等待扩展
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.TaskExtention.WaitResult``1(System.Threading.Tasks.Task{``0})">
            <summary>
              等待异步执行结果
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.TaskExtention.WaitResult``1(System.Threading.Tasks.Task{``0},System.Int32)">
            <summary>
            等待异步执行结果
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="milliseconds">等待任务完成的毫秒数，-1,表示无限期等待</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.TaskExtention.WaitResult``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            等待异步执行结果
            </summary>
            <param name="task"></param>
            <param name="span">等待时间间隔</param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.TaskExtention.WaitResult``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            等待异步执行结果
            </summary>
            <param name="task"></param>
            <param name="token">等待任务完成期间要观察的取消标记</param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.TaskExtention.WaitResult``1(System.Threading.Tasks.Task{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            等待异步执行结果
            </summary>
            <param name="task"></param>
            <param name="milliseconds">等待任务完成的毫秒数，-1,表示无限期等待</param>
            <param name="token">等待任务完成期间要观察的取消标记</param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Extention.UrlExtension">
            <summary>
            url扩展
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.UrlExtension.UrlEncode(System.String)">
            <summary>
            Url编码处理
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.UrlExtension.UrlEncode(System.Object)">
            <summary>
            Url编码处理
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.UrlExtension.UrlDecode(System.String)">
            <summary>
            Url解码处理
            </summary>
        </member>
        <member name="T:OSS.Common.Extention.Volidate.BaseValidateAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:OSS.Common.Extention.Volidate.BaseValidateAttribute.ErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:OSS.Common.Extention.Volidate.OsRequiredAttribute">
            <summary>
            必填验证属性
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.Volidate.OsRequiredAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="_errorMessage"></param>
        </member>
        <member name="T:OSS.Common.Extention.Volidate.OsNumberAttribute">
            <summary>
            数字验证属性
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.Volidate.OsNumberAttribute.#ctor(System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="_min"></param>
            <param name="_max"></param>
            <param name="_errorMessage"></param>
        </member>
        <member name="M:OSS.Common.Extention.Volidate.OsNumberAttribute.Validate(System.String,System.Object)">
            <summary>
            验证方法
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.Volidate.VolidateExtention.IsOsValidate``1(``0)">
            <summary>
            是否通过验证
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.Volidate.VolidateExtention.ValidateOsMessage``1(``0)">
            <summary>
            返回的验证错误信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Extention.Volidate.TypeHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.Volidate.TypeHelper.GetPropertiAttributes(System.String,System.Reflection.PropertyInfo,System.Type)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <param name="fd"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="F:OSS.Common.Extention.Volidate.TypeHelper.proDictionaries">
            <summary>
            
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.Volidate.TypeHelper.GetProperties(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Extention.XmlConvertExtention">
            <summary>
            xml  转化扩展
            </summary>
        </member>
        <member name="M:OSS.Common.Extention.XmlConvertExtention.SerializeToXml(System.Object)">
            <summary>
            对象序列化成xml字符串
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.XmlConvertExtention.DeserializeXml``1(System.String)">
            <summary>
            xml字符串转化到对象
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Extention.XmlConvertExtention.DeserializeXml(System.String,System.Type)">
            <summary>
            xml字符串转化到对象
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Modules.CacheModule.Cache">
            <summary>
            
            </summary>
        </member>
        <member name="M:OSS.Common.Modules.CacheModule.Cache.AddOrUpdate``1(System.String,``0,System.TimeSpan,System.Nullable{System.DateTime})">
            <summary>
            添加缓存,如果存在则更新
            </summary>
            <typeparam name="T">添加缓存对象类型</typeparam>
            <param name="key">添加对象的key</param>
            <param name="obj">值</param>
            <param name="slidingExpiration">相对过期的TimeSpan  如果使用固定时间  =TimeSpan.Zero</param>
            <param name="absoluteExpiration"> 绝对过期时间,不为空则按照绝对过期时间计算 </param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:OSS.Common.Modules.CacheModule.Cache.Add``1(System.String,``0,System.TimeSpan,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="slidingExpiration"></param>
            <param name="absoluteExpiration"></param>
            <param name="isUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Modules.CacheModule.Cache.Get``1(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <typeparam name="T">获取缓存对象类型</typeparam>
            <param name="key">key</param>
            <returns>获取指定key对应的值 </returns>
        </member>
        <member name="M:OSS.Common.Modules.CacheModule.Cache.Remove(System.String)">
            <summary>
            移除缓存对象
            </summary>
            <param name="key"></param>
            <returns>是否成功</returns>
        </member>
        <member name="T:OSS.Common.Modules.CacheModule.CacheUtil">
            <summary>
            缓存的辅助类
            </summary>
        </member>
        <member name="M:OSS.Common.Modules.CacheModule.CacheUtil.GetCache(System.String)">
            <summary>
            通过模块名称获取
            </summary>
            <param name="cacheModule"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Modules.CacheModule.CacheUtil.AddOrUpdate``1(System.String,``0,System.TimeSpan,System.Nullable{System.DateTime},System.String)">
            <summary>
            添加缓存,如果存在则更新
            </summary>
            <typeparam name="T">添加缓存对象类型</typeparam>
            <param name="key">添加对象的key</param>
            <param name="obj">值</param>
            <param name="slidingExpiration">相对过期的TimeSpan，如果使用固定时间  =TimeSpan.Zero</param>
            <param name="absoluteExpiration"> 绝对过期时间 </param>
            <param name="moduleName">模块名称</param>
            <returns> 是否添加成功 </returns>
        </member>
        <member name="M:OSS.Common.Modules.CacheModule.CacheUtil.Get``1(System.String,System.String)">
            <summary>
            获取缓存对象
            </summary>
            <typeparam name="T">获取缓存对象类型</typeparam>
            <param name="key">key</param>
            <param name="moduleName">模块名称</param>
            <returns>获取指定key对应的值 </returns>
        </member>
        <member name="M:OSS.Common.Modules.CacheModule.CacheUtil.Remove(System.String,System.String)">
            <summary>
            移除缓存对象
            </summary>
            <param name="key"></param>
            <param name="moduleName">模块名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:OSS.Common.Modules.CacheModule.ICache">
            <summary>
            
            </summary>
        </member>
        <member name="M:OSS.Common.Modules.CacheModule.ICache.AddOrUpdate``1(System.String,``0,System.TimeSpan,System.Nullable{System.DateTime})">
            <summary>
            添加缓存,如果存在则更新
            </summary>
            <typeparam name="T">添加缓存对象类型</typeparam>
            <param name="key">添加对象的key</param>
            <param name="obj">值</param>
            <param name="slidingExpiration">相对过期的TimeSpan  如果使用固定时间  =TimeSpan.Zero</param>
            <param name="absoluteExpiration"> 绝对过期时间,不为空则按照绝对过期时间计算 </param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:OSS.Common.Modules.CacheModule.ICache.Get``1(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <typeparam name="T">获取缓存对象类型</typeparam>
            <param name="key">key</param>
            <returns>获取指定key对应的值 </returns>
        </member>
        <member name="M:OSS.Common.Modules.CacheModule.ICache.Remove(System.String)">
            <summary>
            移除缓存对象
            </summary>
            <param name="key"></param>
            <returns>是否成功</returns>
        </member>
        <member name="T:OSS.Common.Modules.DirConfigModule.DirConfig">
            <summary>
            默认配置处理
            </summary>
        </member>
        <member name="M:OSS.Common.Modules.DirConfigModule.DirConfig.SetDirConfig``1(System.String,``0)">
            <summary>
            设置字典配置信息
            </summary>
            <typeparam name="TConfig"></typeparam>
            <param name="key"></param>
            <param name="dirConfig"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Modules.DirConfigModule.DirConfig.GetDirConfig``1(System.String)">
            <summary>
              获取字典配置
            </summary>
            <typeparam name="TConfig"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Modules.DirConfigModule.DirConfig.RemoveDirConfig(System.String)">
            <summary>
             移除配置信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Modules.DirConfigModule.DirConfigUtil">
            <summary>
            字典配置通用存储获取信息
            </summary>
        </member>
        <member name="M:OSS.Common.Modules.DirConfigModule.DirConfigUtil.GetDirConfig(System.String)">
            <summary>
            通过模块名称获取
            </summary>
            <param name="dirConfigModule"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Modules.DirConfigModule.DirConfigUtil.SetDirConfig``1(System.String,``0,System.String)">
            <summary>
            设置字典配置信息
            </summary>
            <param name="key"></param>
            <param name="dirConfig"></param>
            <param name="moduleName">模块名称</param>
            <typeparam name="TConfig"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Modules.DirConfigModule.DirConfigUtil.GetDirConfig``1(System.String,System.String)">
            <summary>
              获取字典配置
            </summary>
            <typeparam name="TConfig"></typeparam>
            <param name="key"></param>
            <param name="moduleName">模块名称</param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Modules.DirConfigModule.DirConfigUtil.RemoveDirConfig(System.String,System.String)">
            <summary>
             移除配置信息
            </summary>
            <param name="key"></param>
            <param name="moduleName">模块名称</param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Modules.DirConfigModule.IDirConfig">
            <summary>
            字典配置接口
            </summary>
        </member>
        <member name="M:OSS.Common.Modules.DirConfigModule.IDirConfig.SetDirConfig``1(System.String,``0)">
            <summary>
            添加字典配置
            </summary>
            <param name="key">配置关键字</param>
            <param name="dirConfig">配置具体信息</param>
            <typeparam name="TConfig">配置信息类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Modules.DirConfigModule.IDirConfig.GetDirConfig``1(System.String)">
            <summary>
            添加字典配置
            </summary>
            <param name="key">配置关键字</param>
            <typeparam name="TConfig">配置信息类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Modules.DirConfigModule.IDirConfig.RemoveDirConfig(System.String)">
            <summary>
            移除配置信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Modules.LogModule.ILogWriter">
            <summary>
            日志写实现接口
            </summary>
        </member>
        <member name="M:OSS.Common.Modules.LogModule.ILogWriter.WriteLog(OSS.Common.Modules.LogModule.LogInfo)">
             <summary>
               日志写功能
             </summary>
            <param name="info">日志实体</param>
        </member>
        <member name="M:OSS.Common.Modules.LogModule.ILogWriter.GetLogCode(OSS.Common.Modules.LogModule.LogInfo)">
            <summary>
            获取全局唯一日志编码
            主要用于后期排查
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Modules.LogModule.LogLevelEnum">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="F:OSS.Common.Modules.LogModule.LogLevelEnum.Trace">
            <summary>
            跟踪查看
            </summary>
        </member>
        <member name="F:OSS.Common.Modules.LogModule.LogLevelEnum.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:OSS.Common.Modules.LogModule.LogLevelEnum.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:OSS.Common.Modules.LogModule.LogLevelEnum.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="T:OSS.Common.Modules.LogModule.LogInfo">
            <summary>
            日志实体
            </summary>
        </member>
        <member name="M:OSS.Common.Modules.LogModule.LogInfo.#ctor">
            <summary>
            空构造函数
            </summary>
        </member>
        <member name="M:OSS.Common.Modules.LogModule.LogInfo.#ctor(OSS.Common.Modules.LogModule.LogLevelEnum,System.Object,System.String,System.String)">
            <summary>
            日志构造函数
            </summary>
            <param name="loglevel"></param>
            <param name="msg"></param>
            <param name="msgKey"></param>
            <param name="moduleName"></param>
        </member>
        <member name="P:OSS.Common.Modules.LogModule.LogInfo.Level">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="P:OSS.Common.Modules.LogModule.LogInfo.ModuleName">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="P:OSS.Common.Modules.LogModule.LogInfo.MsgKey">
            <summary>
              key值  可以是自定义的标识  
              根据此字段可以处理当前module下不同复杂日志信息
            </summary>
        </member>
        <member name="P:OSS.Common.Modules.LogModule.LogInfo.Msg">
            <summary>
            日志信息  可以是复杂类型  如 具体实体类
            </summary>
        </member>
        <member name="P:OSS.Common.Modules.LogModule.LogInfo.LogCode">
            <summary>
            编号（全局唯一）
            </summary>
        </member>
        <member name="T:OSS.Common.Modules.LogModule.LogUtil">
            <summary>
            日志写模块
            </summary>
        </member>
        <member name="P:OSS.Common.Modules.LogModule.LogUtil.LogAsynModuleName">
            <summary>
            记录日志操作的异步模块
            </summary>
        </member>
        <member name="M:OSS.Common.Modules.LogModule.LogUtil.GetLogWrite(System.String)">
            <summary>
            通过模块名称获取日志模块实例
            </summary>
            <param name="logModule"></param>
            <returns></returns>
        </member>
        <member name="M:OSS.Common.Modules.LogModule.LogUtil.Info(System.Object,System.String,System.String)">
            <summary>
            记录信息
            </summary>
            <param name="msg"> 日志信息  </param>
            <param name="msgKey">  关键值  </param>
            <param name="moduleName"> 模块名称 </param>
        </member>
        <member name="M:OSS.Common.Modules.LogModule.LogUtil.Warning(System.Object,System.String,System.String)">
            <summary>
            记录警告，用于未处理异常的捕获
            </summary>
            <param name="msg"> 日志信息  </param>
            <param name="msgKey">  关键值  </param>
            <param name="moduleName">模块名称</param>
        </member>
        <member name="M:OSS.Common.Modules.LogModule.LogUtil.Error(System.Object,System.String,System.String)">
            <summary>
            记录错误，用于捕获到的异常信息记录
            </summary>
            <param name="msg"> 日志信息  </param>
            <param name="msgKey">  关键值  </param>
            <param name="moduleName">模块名称</param>
        </member>
        <member name="M:OSS.Common.Modules.LogModule.LogUtil.Trace(System.Object,System.String,System.String)">
            <summary>
            记录错误，用于捕获到的异常信息记录
            </summary>
            <param name="msg"> 日志信息  </param>
            <param name="msgKey">  关键值  </param>
            <param name="moduleName">模块名称</param>
        </member>
        <member name="M:OSS.Common.Modules.LogModule.LogUtil.Log(OSS.Common.Modules.LogModule.LogInfo)">
            <summary>
              记录日志
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:OSS.Common.Modules.LogModule.LogWriter">
            <summary>
            系统默认写日志模块
            </summary>
        </member>
        <member name="M:OSS.Common.Modules.LogModule.LogWriter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:OSS.Common.Modules.LogModule.LogWriter.WriteLog(OSS.Common.Modules.LogModule.LogInfo)">
            <summary>
            写日志
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:OSS.Common.Modules.LogModule.LogWriter.GetLogCode(OSS.Common.Modules.LogModule.LogInfo)">
            <summary>
            生成错误编号
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSS.Common.Modules.ModuleNames">
            <summary>
            缓存Module名称
            </summary>
        </member>
        <member name="F:OSS.Common.Modules.ModuleNames.Default">
            <summary>
            系统默认模块
            </summary>
        </member>
        <member name="F:OSS.Common.Modules.ModuleNames.PayCenter">
            <summary>
             支付模块
            </summary>
        </member>
        <member name="F:OSS.Common.Modules.ModuleNames.PushCenter">
            <summary>
             推送中心模块
            </summary>
        </member>
        <member name="F:OSS.Common.Modules.ModuleNames.SocialCenter">
            <summary>
             社会化中心
            </summary>
        </member>
        <member name="F:OSS.Common.Modules.ModuleNames.MediaStorage">
            <summary>
             多媒体中心模块
            </summary>
        </member>
        <member name="T:OSS.Common.OsConfig">
            <summary>
            基础配置模块
            </summary>
        </member>
        <member name="P:OSS.Common.OsConfig.LogWriterProvider">
            <summary>
              日志模块提供者
            </summary>
        </member>
        <member name="P:OSS.Common.OsConfig.CacheProvider">
            <summary>
              缓存模块提供者
            </summary>
        </member>
        <member name="P:OSS.Common.OsConfig.DirConfigProvider">
            <summary>
              配置信息模块提供者
            </summary>
        </member>
    </members>
</doc>
